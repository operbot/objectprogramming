[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "objectprogramming"
description = """
basic usage is this::

 >>> import op
 >>> o = op.Object()
 >>> o.key = "value"
 >>> o.key
 >>> 'value'

Objects try to mimic a dictionary while trying to be an object with normal
attribute access as well. hidden methods are provided, the methods are
factored out into functions like get, items, keys, register, set, update
and values.

load/save from/to disk::

 >>> from op import Object, load, save
 >>> o = Object()
 >>> o.key = "value"
 >>> p = save(o)
 >>> obj = Object()
 >>> load(obj, p)
 >>> obj.key
 >>> 'value'

great for giving objects peristence by having their state stored in files::

 >>> from op import Object, save
 >>> o = Object()
 >>> save(o)
 'op.obj.Object/2021-08-31/15:31:05.717063'

|
"""
readme = "README.rst"
requires-python = ">=3.7"
keywords = ["functional programming", "objects"]
license = {text = "Public Domain"}
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: Public Domain",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Intended Audience :: System Administrators",
    "Topic :: Communications :: Chat :: Internet Relay Chat",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = ["version"]

[project.scripts]
my-script = "op.handler:command"
