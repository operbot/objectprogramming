#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C0115,C0116,C0413,W0212,C0301,W0613,E0611,E0401


"object programming bot (opbot)"


## imports


import atexit
import importlib
import importlib.util
import os
import readline
import rlcompleter
import sys
import shutil
import time
import termios
import traceback


sys.path.insert(0, os.getcwd())


from op.message import Event
from op.handler import Command, Handler
from op.objects import Wd, cdir, edit, keys, last, printable, write
from op.running import Cfg, boot, command, scan, scandir, scanner
from op.threads import launch
from op.version import __version__


import op.mod


from op.mod import irc


## defines


date = time.ctime(time.time()).replace("  ", " ")


Cfg.name = "opbot"
Wd.workdir = os.path.expanduser("~/.op")


## classes


class CLI(Handler):

    @staticmethod
    def announce(txt):
        pass

    @staticmethod
    def raw(txt):
        print(txt)
        sys.stdout.flush()



class Console(Handler):

    @staticmethod
    def announce(txt):
        pass

    @staticmethod
    def handle(event):
        Command.handle(event)
        event.wait()

    def poll(self):
        event = Event()
        event.txt = input("> ")
        event.orig = repr(self)
        return event

    @staticmethod
    def raw(txt):
        print(txt)
        sys.stdout.flush()


class Completer(rlcompleter.Completer):

    def __init__(self, options):
        rlcompleter.Completer.__init__(self)
        self.matches = []
        self.options = options

    def complete(self, text, state):
        if state == 0:
            if text:
                self.matches = [
                                s for s in self.options
                                if s and s.startswith(text)
                               ]
            else:
                self.matches = self.options[:]
        try:
            return self.matches[state]
        except IndexError:
            return None


## utilities


def importer(mname, path=None):
    if path is None:
        spec = importlib.util.find_spec(mname)
    else:
        spec = importlib.util.spec_from_file_location(mname, path)
    if spec:
        mod = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(mod)
        return mod
    return None


def initer(mname, path=None):
    mod = importer(mname, path)
    if mod and "init" in dir(mod):
        thr = launch(mod.init)
        thr.join()
    scan(mod)


#def scanner(mname, path=None):
#    mod = importer(mname, path)
#    scan(mod)


def print_exc(ex):
    traceback.print_exception(type(ex), ex, ex.__traceback__)


def setcompleter(optionlist):
    completer = Completer(optionlist)
    readline.set_completer(completer.complete)
    readline.parse_and_bind("tab: complete")
    atexit.register(lambda: readline.set_completer(None))


def wrap(func):
    fds = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fds)
    except termios.error:
        gotterm = False
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fds, termios.TCSADRAIN, old)
        for evt in Command.errors:
            print_exc(evt.__exc__)


## commands


def pop(event):
    if not os.path.exists("mod"):
        event.reply("no mod dir to populate from")
        return
    destdir = os.path.join(Wd.get(), "notmod", "")
    cdir(destdir)
    dirs = ["mod", "notmod"]
    for dname in dirs:
        for name in os.listdir(dname):
            if not name.endswith(".py"):
                continue
            path = os.path.join(dname, name)
            dest = os.path.join(destdir, name)
            event.reply("%s -> %s" % (path, dest))
            shutil.copy(path, dest)
    event.ok()


def ver(event):
    event.reply("OP version %s" % __version__)


## runtime


def main():
    boot()
    print("%s started at %s %s" % (Cfg.name.upper(), date, printable(Cfg, skip="name", plain=True)))
    Command.add(pop)
    Command.add(ver)
    scanner(op.mod, importer)
    scandir("mod", scanner, "mod")
    scandir("mod", initer, "mod")
    setcompleter(Command.cmd)
    print("registered %s" % ",".join(sorted(Command.cmd)))
    cli = Console()
    cli.start()
    Cfg.wait = True
    wait()


wrap(main)
