#!/usr/bin/env python3
# pylint: disable=E1101,C0115,C0116,C0413,W0613,C0209
# This file is placed in the Public Domain.


"tinder"


## import


import importlib
import importlib.util
import os
import random
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from op import Command, Event, Handler, Object, Wd
from op import elapsed, launch, locked, parse, scan
from op import Cfg, boot, scandir


## define


paylock = _thread.allocate_lock()


Wd.workdir = ".test"
Cfg.debug = True


errors = []
events = []
results = []


param = Object()
param.add = ["test@shell", "bart", ""]
param.cfg = ["server=localhost", ""]
param.dne = ["test4", ""]
param.rem = ["reddit", ""]
param.dpl = ["reddit title,summary,link", ""]
param.log = ["test1", ""]
param.flt = ["0", ""]
param.fnd = [
             "cfg",
             "log",
             "rss",
             "log txt==test",
             "cfg server==localhost",
             "rss rss==reddit"
            ]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.tdo = ["test4", ""]



## class



class CLI(Handler):

    def raw(self, txt):
        if Cfg.verbose:
            cprint(txt)


def cprint(txt):
    print(txt)
    sys.stdout.flush()


def consume(evt):
    fixed = []
    res = []
    for _ev in evt:
        _ev.wait()
        fixed.append(_ev)
    for fff in fixed:
        try:
            evt.remove(fff)
        except ValueError:
            continue
    return res



@locked(paylock)
def payload(clt):
    cmdz = sorted(Command.cmd)
    random.shuffle(cmdz)
    _nr = 0
    for cmd in cmdz:
        for ex in getattr(param, cmd, [""]):
            evt = Event()
            evt.txt = cmd + " " + ex
            evt.orig = repr(clt)
            evt.parse()
            clt.handle(evt)
            events.append(evt)
            _nr += 1
    return _nr


def importer(mname, path):
    spec = importlib.util.find_spec(mname)
    if spec:
        mod = importlib.util.module_from_spec(spec)
        print(mod)
        spec.loader.exec_module(mod)
        return mod
    return None


def print_exc(ex):
    traceback.print_exception(type(ex), ex, ex.__traceback__)


def setcompleter(optionlist):
    completer = Completer(optionlist)
    readline.set_completer(completer.complete)
    readline.parse_and_bind("tab: complete")
    atexit.register(lambda: readline.set_completer(None))


def wrap(func):
    fds = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fds)
    except termios.error:
        gotterm = False
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fds, termios.TCSADRAIN, old)
        for evt in Command.errors:
            print_exc(evt.__exc__)


def main():
    if os.path.exists(Wd.workdir):
        shutil.rmtree(Wd.workdir)
    boot()
    scandir("mod", importer, "mod")
    scandir("notmod", importer, "mod")
    cli = CLI()
    nrs = Cfg.prs.index or 20
    thrs = []
    starttime = time.time()
    for _nr in range(nrs):
        thrs.append(launch(payload, cli))
    if thrs:
        res = 0
        for thr in thrs:
            res += thr.join()
    else:
        res = nrs * len(Command.cmd)
    consume(events)
    endtime = time.time()
    print("%s %s %s (%s remaining)" %  (
                                        elapsed(endtime - starttime),
                                        res,
                                        (endtime - starttime)/res, len(events))
                                       )


wrap(main)
